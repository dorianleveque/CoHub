@startuml
package "class" as alias <<Frame>> {

abstract class Ticket <<abstract>> {
- id: int
- title: string
- description: string 
- category: string 
- creationDate: string
__
<<create>>
+ Ticket(id: int = null, title: string, description:  string,
 category: string, creationDate : string, requester: User)
<<destroy>>
+ Ticket()
+ getId(): int
+ getTitle(): string
+ setTitle(title:string)
+ getDescription(): string
+ setDescription(description: string) 
+ getCategory (): string
+ setCategory(category: string )
+ getCreationDate (): string
+ getRequester()
+ displayThumbnail (): string
{abstract}+ display()
+ addHelper(helper: User)
+ isHelper(user: User): boolean
+ addMessage(msg: string, user: User)
+ edit()
+ save()
+ delete()




}

class Conversation  {
__
<<create>>
+ Conversation()
<<destroy>>
+ Conversation()
+ addMessage()
}


class Message  {
-texte: string
-sender : User
__
<<create>>
+ Message(texte: string, sender : User)
<<destroy>>
+ Message()
+ save()
}

class TicketCarPooling  {
- departurLocation: string
- arrivalLocation: string
- departurTime: string
- arrivalTime: string
- places: int
__
<<create>>
+ TicketCarPooling(id: int = null, title: string, description:  string, 
category: string, creationDate: string, requester: User,
departurLocation: string, arrivalLocation: string, 
departurTime: string, arrivalTime: string, places: string )
<<destroy>>
+ TicketCarPooling()
+ getDeparturLocation (): string
+ setDeparturLocation(departurLocation: string)
+ getArrivalLocation(): string
+ setArrivalLocation(arrivalLocation: string)
+ getDeparturTime(): string
+ setDeparturTime(departurTime: string)
+ getArrivalTime(): string
+ setArrivalTime(arrivalTime: string)
+ getPlaces(): int
+ setPlaces(places: int)
+ getBasicInfo(): string 
+ display()
+ save()
}



class TicketStudy  {
- subjetct: string
- semester: string
- teacher: string
- theme: string
__
<<create>>
+ TicketStudy(id: int = null, title: string, description:  string, category: string, 
creationDate: string, requester : User, subjetct: string, semester: string, teacher: string = null,
 theme: string = null )
<<destroy>>
+ TicketStudy()
+ getSubject() : string
+ setSubject(subjetct: string)
+ getSemester() : string
+ setSemester(semester: string)
+ getTeacher() : string
+ setTeacher(teacher: string)
+ getTheme() : string
+ setTheme(theme : string)
+ getBasicInfo(): string 
+ display()
+ save()



}

class TicketSharing  {
- item: string

__
<<create>>
+ TicketStudy(id: int = null, title: string, description:  string, 
category: string, creationDate : string, requester : User, item : string)
<<destroy>> 
+ TicketStudy()
+ getItem() : string
+ setItem(item: string)
+ getBasicInfo(): string 
+ display()
+save()
}

class User  {
- id : int
- name  : string
- surname  : string
- nickname : string

__
<<create>>
+ User(id: int, name: string, surname : string, nickname = null)
<<destroy>>
+ User()
+ getId() : int
+ getName() : string
+ getSurName() : string
+ getNickname() : string
+ setNickname(nickname: string)
+ createTicket(): Ticket
+ editTicket(t: Ticket)
+ handleTicket(id: int)
+ deleteTicket()
+ save()
+ checkRights(id)



}


class TicketListControleur {
__
<<create>>
+ TicketListControleur()
<<destroy>>
+ TicketListControleur()   
+ serchTickets (filter: string)
+ getTicket(id: int): Ticket
+ save()
+ displayTickets()
+ displayTicket(id: int)
+ clearTickets()
+ retriveTicket(id: int)
}

class App {
+ curentUser: User
__
<<create>>
+ App()
<<destroy>>
+ App() 
 

}

class Login {

__
<<create>>
+ Login()
<<destroy>>
+ Login() 
+ connect(username: string, password: string) 
+ check(username: string, password: string): boolean 

}


Ticket <|-- TicketCarPooling
Ticket <|--TicketStudy
Ticket <|--TicketSharing
App "1" -- "1" TicketListControleur: ticketListControler 
App "1" -- "1" Login: login 


User "*" *---left- "1" Ticket : requester
User "*" o---left- "*" Ticket : helper
Ticket "*" *---left- "1" Conversation: conversation
Conversation"1" *-left-- "*" Message :message
Ticket "1" -down-* "*" TicketListControleur : tickets

}
@enduml