@startuml diagramme de classe

abstract class Ticket <<abstract>> {
- id  : int
- title : string
- description : string 
- category : string 
- creationDate : string
__
<<create>>
+ Ticket(id: int = null, title: string, description:  string,
 category: string, creationDate : string, demandeur : User)
<<destroy>>
+ Ticket()
+ getId(): int
+ getTitle(): string
+ setTitle(title:string)
+ getDescription() : string
+ setDescription(description : string) 
+ getCategory () : string
+ getCreationDate (): string
{abstract}+ display()
+ addHelper(helper: User)
+save()



}

class Conversation  {
__
<<create>>
+ Conversation()
<<destroy>>
+ Conversation()
}


class Message  {
__
<<create>>
+ Message()
<<destroy>>
+ Message()
}

class TicketCarSharing  {
- departurLocation  : string
- arrivalLocation  : string
- departurTime : string
- arrivalTime  : string
- places : int
__
<<create>>
+ TicketCarSharing(id: int = null, title: string, description:  string, 
category: string, creationDate : string, demandeur : User,
departurLocation  : string, arrivalLocation  : string, 
departurTime : string, arrivalTime  : string, places : string )
<<destroy>>
+ TicketCarSharing()
+ getDeparturLocation () : string
+ setDeparturLocation(departurLocation: string)
+ getArrivalLocation(): string
+ setArrivalLocation(arrivalLocation: string)
+ getDeparturTime() : string
+ setDeparturTime(departurTime: string)
+ getArrivalTime(): string
+ setArrivalTime(arrivalTime: string)
+ getPlaces() : int
+ setPlaces(places: int)
+ display()
+ save()
}



class TicketStudy  {
- subjetct : string
- semester : string
- teacher : string
- theme : string
__
<<create>>
+ TicketStudy(id: int = null, title: string, description:  string, category: string, 
creationDate : string, demandeur : User, departurLocation  : string, 
arrivalLocation  : string, departurTime : string, arrivalTime  : string, 
places : string, subjetct: string, semester: string, teacher: string = null,
 theme: string = null )
<<destroy>>
+ TicketStudy()
+ getSubject() : string
+ setSubject(subjetct: string)
+ getSemester() : string
+ setSemester(semester: string)
+ getTeacher() : string
+ setTeacher(teacher: string)
+ getTheme() : string
+ setTheme(theme : string)
+ display()
+ save()



}

class TicketSharing  {
- subjetct : string
- semester : string
- teacher : string
- theme : string
__
<<create>>
+ TicketStudy(id: int = null, title: string, description:  string, 
category: string, creationDate : string, demandeur : User, 
departurLocation  : string, arrivalLocation  : string, 
departurTime : string, arrivalTime  : string, places : string,
subjetct: string, semester: string, teacher: string = null,
theme: string = null )
<<destroy>> 
+ TicketStudy()
+ getSubject() : string
+ setSubject(subjetct: string)
+ getSemester() : string
+ setSemester(semester: string)
+ getTeacher() : string
+ setTeacher(teacher: string)
+ getTheme() : string
+ setTheme(theme : string)

+ display()
+save()
}

class User  {
- id : int
- name  : string
- surname  : string
- nickname : string

__
<<create>>
+ User(id: int, name: string, surname : string, nickname = null)
<<destroy>>
+ User()
+ getId() : int
+ getName() : string
+ getSurName() : string
+ getNickname() : string
+ setNickname(nickname: string)
+ save()



}


class TicketListControleur <<static>> {
__
<<create>>
+ TicketListControleur()
<<destroy>>
+ TicketListControleur()   
+ serchTickets (filter  : string ): Ticket *
+ save()
+ display(ticket : Ticket *)


}


Ticket <|-- TicketCarSharing
Ticket <|--TicketStudy
Ticket <|--TicketSharing
User "*" *---left- "1" Ticket : requester
User "*" o---left- "*" Ticket : helper
Ticket "*" *---left- "1" Conversation: conversation
Conversation"1" *-left-- "*" Message :message
Ticket "1" -down-* "*" TicketListControleur : tickets

@enduml